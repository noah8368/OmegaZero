// Noah Himed
// 27 March 2021
//
// Define the bit masks used to denote the positions pieces canmove
// to in the bitboard representation of a chess board.
//
// Licensed under MIT License. Terms and conditions enclosed in "LICENSE.txt".

#include "board.h"

#include "constants.h"

const Bitboard kNonSliderAttackMasks[kNumNonSliderMasks][kNumSquares] = {
  // Define white pawn push attack masks.
  {0X0000000000000100, 0X0000000000000200, 0X0000000000000400,
   0X0000000000000800, 0X0000000000001000, 0X0000000000002000,
   0X0000000000004000, 0X0000000000008000, 0X0000000001010000,
   0X0000000002020000, 0X0000000004040000, 0X0000000008080000,
   0X0000000010100000, 0X0000000020200000, 0X0000000040400000,
   0X0000000080800000, 0X0000000001000000, 0X0000000002000000,
   0X0000000004000000, 0X0000000008000000, 0X0000000010000000,
   0X0000000020000000, 0X0000000040000000, 0X0000000080000000,
   0X0000000100000000, 0X0000000200000000, 0X0000000400000000,
   0X0000000800000000, 0X0000001000000000, 0X0000002000000000,
   0X0000004000000000, 0X0000008000000000, 0X0000010000000000,
   0X0000020000000000, 0X0000040000000000, 0X0000080000000000,
   0X0000100000000000, 0X0000200000000000, 0X0000400000000000,
   0X0000800000000000, 0X0001000000000000, 0X0002000000000000,
   0X0004000000000000, 0X0008000000000000, 0X0010000000000000,
   0X0020000000000000, 0X0040000000000000, 0X0080000000000000,
   0X0100000000000000, 0X0200000000000000, 0X0400000000000000,
   0X0800000000000000, 0X1000000000000000, 0X2000000000000000,
   0X4000000000000000, 0X8000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000},
  // Define white pawn capture attack masks.
  {0X0000000000000200, 0X0000000000000500, 0X0000000000000A00,
   0X0000000000001400, 0X0000000000002800, 0X0000000000005000,
   0X000000000000A000, 0X0000000000004000, 0X0000000000020000,
   0X0000000000050000, 0X00000000000A0000, 0X0000000000140000,
   0X0000000000280000, 0X0000000000500000, 0X0000000000A00000,
   0X0000000000400000, 0X0000000002000000, 0X0000000005000000,
   0X000000000A000000, 0X0000000014000000, 0X0000000028000000,
   0X0000000050000000, 0X00000000A0000000, 0X0000000040000000,
   0X0000000200000000, 0X0000000500000000, 0X0000000A00000000,
   0X0000001400000000, 0X0000002800000000, 0X0000005000000000,
   0X000000A000000000, 0X0000004000000000, 0X0000020000000000,
   0X0000050000000000, 0X00000A0000000000, 0X0000140000000000,
   0X0000280000000000, 0X0000500000000000, 0X0000A00000000000,
   0X0000400000000000, 0X0002000000000000, 0X0005000000000000,
   0X000A000000000000, 0X0014000000000000, 0X0028000000000000,
   0X0050000000000000, 0X00A0000000000000, 0X0040000000000000,
   0X0200000000000000, 0X0500000000000000, 0X0A00000000000000,
   0X1400000000000000, 0X2800000000000000, 0X5000000000000000,
   0XA000000000000000, 0X4000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000},
  // Define black pawn push attack masks.
  {0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000001,
   0X0000000000000002, 0X0000000000000004, 0X0000000000000008,
   0X0000000000000010, 0X0000000000000020, 0X0000000000000040,
   0X0000000000000080, 0X0000000000000100, 0X0000000000000200,
   0X0000000000000400, 0X0000000000000800, 0X0000000000001000,
   0X0000000000002000, 0X0000000000004000, 0X0000000000008000,
   0X0000000000010000, 0X0000000000020000, 0X0000000000040000,
   0X0000000000080000, 0X0000000000100000, 0X0000000000200000,
   0X0000000000400000, 0X0000000000800000, 0X0000000001000000,
   0X0000000002000000, 0X0000000004000000, 0X0000000008000000,
   0X0000000010000000, 0X0000000020000000, 0X0000000040000000,
   0X0000000080000000, 0X0000000100000000, 0X0000000200000000,
   0X0000000400000000, 0X0000000800000000, 0X0000001000000000,
   0X0000002000000000, 0X0000004000000000, 0X0000008000000000,
   0X0000010100000000, 0X0000020200000000, 0X0000040400000000,
   0X0000080800000000, 0X0000101000000000, 0X0000202000000000,
   0X0000404000000000, 0X0000808000000000, 0X0001000000000000,
   0X0002000000000000, 0X0004000000000000, 0X0008000000000000,
   0X0010000000000000, 0X0020000000000000, 0X0040000000000000,
   0X0080000000000000},
  // Define black pawn capture attack masks.
  {0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
   0X0000000000000000, 0X0000000000000000, 0X0000000000000002,
   0X0000000000000005, 0X000000000000000A, 0X0000000000000014,
   0X0000000000000028, 0X0000000000000050, 0X00000000000000A0,
   0X0000000000000040, 0X0000000000000200, 0X0000000000000500,
   0X0000000000000A00, 0X0000000000001400, 0X0000000000002800,
   0X0000000000005000, 0X000000000000A000, 0X0000000000004000,
   0X0000000000020000, 0X0000000000050000, 0X00000000000A0000,
   0X0000000000140000, 0X0000000000280000, 0X0000000000500000,
   0X0000000000A00000, 0X0000000000400000, 0X0000000002000000,
   0X0000000005000000, 0X000000000A000000, 0X0000000014000000,
   0X0000000028000000, 0X0000000050000000, 0X00000000A0000000,
   0X0000000040000000, 0X0000000200000000, 0X0000000500000000,
   0X0000000A00000000, 0X0000001400000000, 0X0000002800000000,
   0X0000005000000000, 0X000000A000000000, 0X0000004000000000,
   0X0000020000000000, 0X0000050000000000, 0X00000A0000000000,
   0X0000140000000000, 0X0000280000000000, 0X0000500000000000,
   0X0000A00000000000, 0X0000400000000000, 0X0002000000000000,
   0X0005000000000000, 0X000A000000000000, 0X0014000000000000,
   0X0028000000000000, 0X0050000000000000, 0X00A0000000000000,
   0X0040000000000000},
  // Define knight attack masks.
  {0X0000000000020400, 0X0000000000050800, 0X00000000000A1100,
   0X0000000000142200, 0X0000000000284400, 0X0000000000508800,
   0X0000000000A01000, 0X0000000000402000, 0X0000000002040004,
   0X0000000005080008, 0X000000000A110011, 0X0000000014220022,
   0X0000000028440044, 0X0000000050880088, 0X00000000A0100010,
   0X0000000040200020, 0X0000000204000402, 0X0000000508000805,
   0X0000000A1100110A, 0X0000001422002214, 0X0000002844004428,
   0X0000005088008850, 0X000000A0100010A0, 0X0000004020002040,
   0X0000020400040200, 0X0000050800080500, 0X00000A1100110A00,
   0X0000142200221400, 0X0000284400442800, 0X0000508800885000,
   0X0000A0100010A000, 0X0000402000204000, 0X0002040004020000,
   0X0005080008050000, 0X000A1100110A0000, 0X0014220022140000,
   0X0028440044280000, 0X0050880088500000, 0X00A0100010A00000,
   0X0040200020400000, 0X0204000402000000, 0X0508000805000000,
   0X0A1100110A000000, 0X1422002214000000, 0X2844004428000000,
   0X5088008850000000, 0XA0100010A0000000, 0X4020002040000000,
   0X0400040200000000, 0X0800080500000000, 0X1100110A00000000,
   0X2200221400000000, 0X4400442800000000, 0X8800885000000000,
   0X100010A000000000, 0X2000204000000000, 0X0004020000000000,
   0X0008050000000000, 0X00110A0000000000, 0X0022140000000000,
   0X0044280000000000, 0X0088500000000000, 0X0010A00000000000,
   0X0020400000000000},
  // Define king attack masks.
  {0X0000000000000302, 0X0000000000000705, 0X0000000000000E0A,
   0X0000000000001C14, 0X0000000000003828, 0X0000000000007050,
   0X000000000000E0A0, 0X000000000000C040, 0X0000000000030203,
   0X0000000000070507, 0X00000000000E0A0E, 0X00000000001C141C,
   0X0000000000382838, 0X0000000000705070, 0X0000000000E0A0E0,
   0X0000000000C040C0, 0X0000000003020300, 0X0000000007050700,
   0X000000000E0A0E00, 0X000000001C141C00, 0X0000000038283800,
   0X0000000070507000, 0X00000000E0A0E000, 0X00000000C040C000,
   0X0000000302030000, 0X0000000705070000, 0X0000000E0A0E0000,
   0X0000001C141C0000, 0X0000003828380000, 0X0000007050700000,
   0X000000E0A0E00000, 0X000000C040C00000, 0X0000030203000000,
   0X0000070507000000, 0X00000E0A0E000000, 0X00001C141C000000,
   0X0000382838000000, 0X0000705070000000, 0X0000E0A0E0000000,
   0X0000C040C0000000, 0X0003020300000000, 0X0007050700000000,
   0X000E0A0E00000000, 0X001C141C00000000, 0X0038283800000000,
   0X0070507000000000, 0X00E0A0E000000000, 0X00C040C000000000,
   0X0302030000000000, 0X0705070000000000, 0X0E0A0E0000000000,
   0X1C141C0000000000, 0X3828380000000000, 0X7050700000000000,
   0XE0A0E00000000000, 0XC040C00000000000, 0X0203000000000000,
   0X0507000000000000, 0X0A0E000000000000, 0X141C000000000000,
   0X2838000000000000, 0X5070000000000000, 0XA0E0000000000000,
   0X40C0000000000000}
};

const Bitboard kSliderPieceMasks[kNumSliderMasks][kNumSquares] = {
  // Define bishop piece masks.
  {0X0040201008040200, 0X0000402010080400, 0X0000004020100A00,
   0X0000000040221400, 0X0000000002442800, 0X0000000204085000,
   0X0000020408102000, 0X0002040810204000, 0X0020100804020000,
   0X0040201008040000, 0X00004020100A0000, 0X0000004022140000,
   0X0000000244280000, 0X0000020408500000, 0X0002040810200000,
   0X0004081020400000, 0X0010080402000200, 0X0020100804000400,
   0X004020100A000A00, 0X0000402214001400, 0X0000024428002800,
   0X0002040850005000, 0X0004081020002000, 0X0008102040004000,
   0X0008040200020400, 0X0010080400040800, 0X0020100A000A1000,
   0X0040221400142200, 0X0002442800284400, 0X0004085000500800,
   0X0008102000201000, 0X0010204000402000, 0X0004020002040800,
   0X0008040004081000, 0X00100A000A102000, 0X0022140014224000,
   0X0044280028440200, 0X0008500050080400, 0X0010200020100800,
   0X0020400040201000, 0X0002000204081000, 0X0004000408102000,
   0X000A000A10204000, 0X0014001422400000, 0X0028002844020000,
   0X0050005008040200, 0X0020002010080400, 0X0040004020100800,
   0X0000020408102000, 0X0000040810204000, 0X00000A1020400000,
   0X0000142240000000, 0X0000284402000000, 0X0000500804020000,
   0X0000201008040200, 0X0000402010080400, 0X0002040810204000,
   0X0004081020400000, 0X000A102040000000, 0X0014224000000000,
   0X0028440200000000, 0X0050080402000000, 0X0020100804020000,
   0X0040201008040200},
  // Define rook piece masks.
  {0X000101010101017E, 0X000202020202027C, 0X000404040404047A,
   0X0008080808080876, 0X001010101010106E, 0X002020202020205E,
   0X004040404040403E, 0X008080808080807E, 0X0001010101017E00,
   0X0002020202027C00, 0X0004040404047A00, 0X0008080808087600,
   0X0010101010106E00, 0X0020202020205E00, 0X0040404040403E00,
   0X0080808080807E00, 0X00010101017E0100, 0X00020202027C0200,
   0X00040404047A0400, 0X0008080808760800, 0X00101010106E1000,
   0X00202020205E2000, 0X00404040403E4000, 0X00808080807E8000,
   0X000101017E010100, 0X000202027C020200, 0X000404047A040400,
   0X0008080876080800, 0X001010106E101000, 0X002020205E202000,
   0X004040403E404000, 0X008080807E808000, 0X0001017E01010100,
   0X0002027C02020200, 0X0004047A04040400, 0X0008087608080800,
   0X0010106E10101000, 0X0020205E20202000, 0X0040403E40404000,
   0X0080807E80808000, 0X00017E0101010100, 0X00027C0202020200,
   0X00047A0404040400, 0X0008760808080800, 0X00106E1010101000,
   0X00205E2020202000, 0X00403E4040404000, 0X00807E8080808000,
   0X007E010101010100, 0X007C020202020200, 0X007A040404040400,
   0X0076080808080800, 0X006E101010101000, 0X005E202020202000,
   0X003E404040404000, 0X007E808080808000, 0X7E01010101010100,
   0X7C02020202020200, 0X7A04040404040400, 0X7608080808080800,
   0X6E10101010101000, 0X5E20202020202000, 0X3E40404040404000,
   0X7E80808080808000}
};
